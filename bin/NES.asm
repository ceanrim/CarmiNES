; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?RenderBuffer@@3PEAIEA				; RenderBuffer
PUBLIC	?BufferInfo@@3UtagBITMAPINFO@@A			; BufferInfo
PUBLIC	?Running@@3_NA					; Running
PUBLIC	?LogFileHandle@@3PEAXEA				; LogFileHandle
PUBLIC	?InternalMemory@@3PEAEEA			; InternalMemory
_BSS	SEGMENT
?RenderBuffer@@3PEAIEA DQ 01H DUP (?)			; RenderBuffer
?BufferInfo@@3UtagBITMAPINFO@@A DB 02cH DUP (?)		; BufferInfo
	ALIGN	8

?InternalMemory@@3PEAEEA DQ 01H DUP (?)			; InternalMemory
_BSS	ENDS
CONST	SEGMENT
$SG85278 DB	0dH, 0aH, 00H
	ORG $+1
$SG85307 DB	'Close?', 00H
	ORG $+5
$SG85308 DB	'Are you sure you want to close?', 00H
$SG85340 DB	'Aborting. Couldn''t allocate space for internal memory.', 00H
	ORG $+1
$SG85341 DB	'Internal Memory allocated.', 00H
	ORG $+5
$SG85342 DB	'NESWindowClass', 00H
	ORG $+1
$SG85344 DB	'Aborting. Couldn''t register window class.', 00H
	ORG $+6
$SG85345 DB	'Registered window class.', 00H
	ORG $+7
$SG85346 DB	'NES17 by Carmine', 00H
	ORG $+7
$SG85348 DB	'Aborting. Couldn''t create window.', 00H
	ORG $+6
$SG85349 DB	'Created window.', 00H
CONST	ENDS
_DATA	SEGMENT
?Running@@3_NA DB 01H					; Running
	ORG $+7
?LogFileHandle@@3PEAXEA DQ ffffffffffffffffH		; LogFileHandle
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	?TestRender@@YAXXZ				; TestRender
PUBLIC	?TimeString@@YA_NPEAD@Z				; TimeString
PUBLIC	?Log@@YA_NPEAD@Z				; Log
PUBLIC	?CreateLogFile@@YA_NXZ				; CreateLogFile
PUBLIC	?WindowCallback@@YA_JPEAUHWND__@@I_K_J@Z	; WindowCallback
PUBLIC	?WinMainCRTStartup@@YAXXZ			; WinMainCRTStartup
EXTRN	strlen:PROC
EXTRN	__imp_GetCommandLineA:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_GetSystemTime:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_GetModuleHandleA:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_PostQuitMessage:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_MessageBoxA:PROC
EXTRN	__imp_LoadCursorA:PROC
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN12
	DD	imagerel $LN12+803
	DD	imagerel $unwind$WinMain
$pdata$?TestRender@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+55
	DD	imagerel $unwind$?TestRender@@YAXXZ
$pdata$?TimeString@@YA_NPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+319
	DD	imagerel $unwind$?TimeString@@YA_NPEAD@Z
$pdata$?Log@@YA_NPEAD@Z DD imagerel $LN7
	DD	imagerel $LN7+320
	DD	imagerel $unwind$?Log@@YA_NPEAD@Z
$pdata$?CreateLogFile@@YA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+653
	DD	imagerel $unwind$?CreateLogFile@@YA_NXZ
$pdata$?WindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN11
	DD	imagerel $LN11+436
	DD	imagerel $unwind$?WindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?WinMainCRTStartup@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?WinMainCRTStartup@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 031c01H
	DD	022011cH
	DD	07015H
$unwind$?TestRender@@YAXXZ DD 010401H
	DD	02204H
$unwind$?TimeString@@YA_NPEAD@Z DD 010901H
	DD	08209H
$unwind$?Log@@YA_NPEAD@Z DD 010901H
	DD	0e209H
$unwind$?CreateLogFile@@YA_NXZ DD 020601H
	DD	07002d206H
$unwind$?WindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 021a01H
	DD	01f011aH
$unwind$?WinMainCRTStartup@@YAXXZ DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtp
; File c:\nes emulator 2017 edition by carmine\src\main.cpp
_TEXT	SEGMENT
tv66 = 32
?WinMainCRTStartup@@YAXXZ PROC				; WinMainCRTStartup

; 267  : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 268  :     WinMain(GetModuleHandle(NULL),

  00004	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCommandLineA
  0000a	48 89 44 24 20	 mov	 QWORD PTR tv66[rsp], rax
  0000f	33 c9		 xor	 ecx, ecx
  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  00017	41 b9 01 00 00
	00		 mov	 r9d, 1
  0001d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv66[rsp]
  00022	4c 8b c1	 mov	 r8, rcx
  00025	33 d2		 xor	 edx, edx
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 WinMain

; 269  :             NULL,
; 270  :             GetCommandLine(),
; 271  :             SW_SHOWNORMAL);
; 272  : }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
?WinMainCRTStartup@@YAXXZ ENDP				; WinMainCRTStartup
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\nes emulator 2017 edition by carmine\src\main.cpp
_TEXT	SEGMENT
tv64 = 112
Height$1 = 116
Width$2 = 120
Result$ = 128
ClientRect$3 = 136
DC$4 = 152
Paint$5 = 160
hwnd$ = 256
uMsg$ = 264
wParam$ = 272
lParam$ = 280
?WindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC		; WindowCallback

; 136  : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H

; 137  :     LRESULT Result {};

  0001a	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR Result$[rsp], 0

; 138  :     switch(uMsg)

  00026	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR uMsg$[rsp]
  0002d	89 44 24 70	 mov	 DWORD PTR tv64[rsp], eax
  00031	83 7c 24 70 05	 cmp	 DWORD PTR tv64[rsp], 5
  00036	74 1a		 je	 SHORT $LN4@WindowCall
  00038	83 7c 24 70 0f	 cmp	 DWORD PTR tv64[rsp], 15
  0003d	74 58		 je	 SHORT $LN8@WindowCall
  0003f	83 7c 24 70 10	 cmp	 DWORD PTR tv64[rsp], 16
  00044	74 11		 je	 SHORT $LN5@WindowCall
  00046	83 7c 24 70 12	 cmp	 DWORD PTR tv64[rsp], 18
  0004b	74 3e		 je	 SHORT $LN7@WindowCall
  0004d	e9 25 01 00 00	 jmp	 $LN9@WindowCall
$LN4@WindowCall:

; 139  :     {
; 140  :         case WM_SIZE:
; 141  :         {
; 142  :         } break;

  00052	e9 4d 01 00 00	 jmp	 $LN2@WindowCall
$LN5@WindowCall:

; 143  : 
; 144  :         case WM_CLOSE:
; 145  :         {
; 146  :             if(MessageBox(hwnd, "Are you sure you want to close?",
; 147  :                           "Close?", MB_YESNO) == IDYES)

  00057	41 b9 04 00 00
	00		 mov	 r9d, 4
  0005d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG85307
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG85308
  0006b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR hwnd$[rsp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBoxA
  00079	83 f8 06	 cmp	 eax, 6
  0007c	75 08		 jne	 SHORT $LN6@WindowCall

; 148  :             {
; 149  :                 PostQuitMessage(0);

  0007e	33 c9		 xor	 ecx, ecx
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PostQuitMessage
$LN6@WindowCall:

; 150  :             }
; 151  :         } break;

  00086	e9 19 01 00 00	 jmp	 $LN2@WindowCall
$LN7@WindowCall:

; 152  :         case WM_QUIT:
; 153  :         {
; 154  :             Running = false;

  0008b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0 ; Running

; 155  :         } break;

  00092	e9 0d 01 00 00	 jmp	 $LN2@WindowCall
$LN8@WindowCall:

; 156  :         case WM_PAINT:
; 157  :         {
; 158  :             PAINTSTRUCT Paint;
; 159  :             HDC DC = BeginPaint(hwnd, &Paint);

  00097	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR Paint$5[rsp]
  0009f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR hwnd$[rsp]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  000ad	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR DC$4[rsp], rax

; 160  :             RECT ClientRect;
; 161  :             GetClientRect(hwnd, &ClientRect);

  000b5	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR ClientRect$3[rsp]
  000bd	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR hwnd$[rsp]
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 162  :             int Width = ClientRect.right - ClientRect.left;

  000cb	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ClientRect$3[rsp]
  000d2	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR ClientRect$3[rsp+8]
  000d9	2b c8		 sub	 ecx, eax
  000db	8b c1		 mov	 eax, ecx
  000dd	89 44 24 78	 mov	 DWORD PTR Width$2[rsp], eax

; 163  :             int Height = ClientRect.bottom - ClientRect.top;

  000e1	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ClientRect$3[rsp+4]
  000e8	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR ClientRect$3[rsp+12]
  000ef	2b c8		 sub	 ecx, eax
  000f1	8b c1		 mov	 eax, ecx
  000f3	89 44 24 74	 mov	 DWORD PTR Height$1[rsp], eax

; 164  :             StretchDIBits(DC, 0, 0, Width, Height, 0, 0, 1366, 768, RenderBuffer,

  000f7	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  000ff	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00107	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?BufferInfo@@3UtagBITMAPINFO@@A ; BufferInfo
  0010e	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00113	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?RenderBuffer@@3PEAIEA ; RenderBuffer
  0011a	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0011f	c7 44 24 40 00
	03 00 00	 mov	 DWORD PTR [rsp+64], 768	; 00000300H
  00127	c7 44 24 38 56
	05 00 00	 mov	 DWORD PTR [rsp+56], 1366 ; 00000556H
  0012f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00137	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0013f	8b 44 24 74	 mov	 eax, DWORD PTR Height$1[rsp]
  00143	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00147	44 8b 4c 24 78	 mov	 r9d, DWORD PTR Width$2[rsp]
  0014c	45 33 c0	 xor	 r8d, r8d
  0014f	33 d2		 xor	 edx, edx
  00151	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR DC$4[rsp]
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 165  :                           &BufferInfo, DIB_RGB_COLORS, SRCCOPY);
; 166  :             EndPaint(hwnd, &Paint);

  0015f	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR Paint$5[rsp]
  00167	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR hwnd$[rsp]
  0016f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 167  :         } break;

  00175	eb 2d		 jmp	 SHORT $LN2@WindowCall
$LN9@WindowCall:

; 168  :         default:
; 169  :         {
; 170  :             Result = DefWindowProc(hwnd, uMsg, wParam, lParam);

  00177	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  0017f	4c 8b 84 24 10
	01 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  00187	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR uMsg$[rsp]
  0018e	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR hwnd$[rsp]
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  0019c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR Result$[rsp], rax
$LN2@WindowCall:

; 171  :         } break;
; 172  :     }
; 173  :     return Result;

  001a4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Result$[rsp]

; 174  : }

  001ac	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  001b3	c3		 ret	 0
?WindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP		; WindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\nes emulator 2017 edition by carmine\src\main.cpp
_TEXT	SEGMENT
TimePointer$ = 64
Time$ = 72
LogName$ = 88
?CreateLogFile@@YA_NXZ PROC				; CreateLogFile

; 88   : {

$LN5:
  00000	40 57		 push	 rdi
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 89   :     SYSTEMTIME Time; //The log's name has format logSSMMHHDDMMYY.txt, so we need
; 90   :                      //the system time
; 91   :     LPSYSTEMTIME TimePointer = &Time;

  00006	48 8d 44 24 48	 lea	 rax, QWORD PTR Time$[rsp]
  0000b	48 89 44 24 40	 mov	 QWORD PTR TimePointer$[rsp], rax

; 92   :     GetSystemTime(TimePointer);

  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR TimePointer$[rsp]
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 93   :     char LogName [20] {};

  0001b	48 8d 44 24 58	 lea	 rax, QWORD PTR LogName$[rsp]
  00020	48 8b f8	 mov	 rdi, rax
  00023	33 c0		 xor	 eax, eax
  00025	b9 14 00 00 00	 mov	 ecx, 20
  0002a	f3 aa		 rep stosb

; 94   :     LogName[0]  = 'l';

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	48 6b c0 00	 imul	 rax, rax, 0
  00035	c6 44 04 58 6c	 mov	 BYTE PTR LogName$[rsp+rax], 108 ; 0000006cH

; 95   :     LogName[1]  = 'o';

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	48 6b c0 01	 imul	 rax, rax, 1
  00043	c6 44 04 58 6f	 mov	 BYTE PTR LogName$[rsp+rax], 111 ; 0000006fH

; 96   :     LogName[2]  = 'g';

  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	48 6b c0 02	 imul	 rax, rax, 2
  00051	c6 44 04 58 67	 mov	 BYTE PTR LogName$[rsp+rax], 103 ; 00000067H

; 97   :     LogName[3]  = (TimePointer->wDay    / 10)          + 48;

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  0005b	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0005f	99		 cdq
  00060	b9 0a 00 00 00	 mov	 ecx, 10
  00065	f7 f9		 idiv	 ecx
  00067	83 c0 30	 add	 eax, 48			; 00000030H
  0006a	b9 01 00 00 00	 mov	 ecx, 1
  0006f	48 6b c9 03	 imul	 rcx, rcx, 3
  00073	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 98   :     LogName[4]  = (TimePointer->wDay    % 10)          + 48;

  00077	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  0007c	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00080	99		 cdq
  00081	b9 0a 00 00 00	 mov	 ecx, 10
  00086	f7 f9		 idiv	 ecx
  00088	8b c2		 mov	 eax, edx
  0008a	83 c0 30	 add	 eax, 48			; 00000030H
  0008d	b9 01 00 00 00	 mov	 ecx, 1
  00092	48 6b c9 04	 imul	 rcx, rcx, 4
  00096	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 99   :     LogName[5]  = (TimePointer->wMonth  / 10)          + 48;

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  0009f	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  000a3	99		 cdq
  000a4	b9 0a 00 00 00	 mov	 ecx, 10
  000a9	f7 f9		 idiv	 ecx
  000ab	83 c0 30	 add	 eax, 48			; 00000030H
  000ae	b9 01 00 00 00	 mov	 ecx, 1
  000b3	48 6b c9 05	 imul	 rcx, rcx, 5
  000b7	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 100  :     LogName[6]  = (TimePointer->wMonth  % 10)          + 48;

  000bb	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  000c0	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  000c4	99		 cdq
  000c5	b9 0a 00 00 00	 mov	 ecx, 10
  000ca	f7 f9		 idiv	 ecx
  000cc	8b c2		 mov	 eax, edx
  000ce	83 c0 30	 add	 eax, 48			; 00000030H
  000d1	b9 01 00 00 00	 mov	 ecx, 1
  000d6	48 6b c9 06	 imul	 rcx, rcx, 6
  000da	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 101  :     LogName[7]  = ((TimePointer->wYear  % 100) / 10)   + 48;

  000de	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  000e3	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000e6	99		 cdq
  000e7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000ec	f7 f9		 idiv	 ecx
  000ee	8b c2		 mov	 eax, edx
  000f0	99		 cdq
  000f1	b9 0a 00 00 00	 mov	 ecx, 10
  000f6	f7 f9		 idiv	 ecx
  000f8	83 c0 30	 add	 eax, 48			; 00000030H
  000fb	b9 01 00 00 00	 mov	 ecx, 1
  00100	48 6b c9 07	 imul	 rcx, rcx, 7
  00104	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 102  :     LogName[8]  = (TimePointer->wYear   % 10)          + 48;

  00108	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  0010d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00110	99		 cdq
  00111	b9 0a 00 00 00	 mov	 ecx, 10
  00116	f7 f9		 idiv	 ecx
  00118	8b c2		 mov	 eax, edx
  0011a	83 c0 30	 add	 eax, 48			; 00000030H
  0011d	b9 01 00 00 00	 mov	 ecx, 1
  00122	48 6b c9 08	 imul	 rcx, rcx, 8
  00126	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 103  :     LogName[9]  = (TimePointer->wHour   / 10)          + 48;

  0012a	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  0012f	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00133	99		 cdq
  00134	b9 0a 00 00 00	 mov	 ecx, 10
  00139	f7 f9		 idiv	 ecx
  0013b	83 c0 30	 add	 eax, 48			; 00000030H
  0013e	b9 01 00 00 00	 mov	 ecx, 1
  00143	48 6b c9 09	 imul	 rcx, rcx, 9
  00147	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 104  :     LogName[10] = (TimePointer->wHour   % 10)          + 48;

  0014b	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  00150	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00154	99		 cdq
  00155	b9 0a 00 00 00	 mov	 ecx, 10
  0015a	f7 f9		 idiv	 ecx
  0015c	8b c2		 mov	 eax, edx
  0015e	83 c0 30	 add	 eax, 48			; 00000030H
  00161	b9 01 00 00 00	 mov	 ecx, 1
  00166	48 6b c9 0a	 imul	 rcx, rcx, 10
  0016a	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 105  :     LogName[11] = (TimePointer->wMinute / 10)          + 48;

  0016e	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  00173	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00177	99		 cdq
  00178	b9 0a 00 00 00	 mov	 ecx, 10
  0017d	f7 f9		 idiv	 ecx
  0017f	83 c0 30	 add	 eax, 48			; 00000030H
  00182	b9 01 00 00 00	 mov	 ecx, 1
  00187	48 6b c9 0b	 imul	 rcx, rcx, 11
  0018b	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 106  :     LogName[12] = (TimePointer->wMinute % 10)          + 48;

  0018f	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  00194	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00198	99		 cdq
  00199	b9 0a 00 00 00	 mov	 ecx, 10
  0019e	f7 f9		 idiv	 ecx
  001a0	8b c2		 mov	 eax, edx
  001a2	83 c0 30	 add	 eax, 48			; 00000030H
  001a5	b9 01 00 00 00	 mov	 ecx, 1
  001aa	48 6b c9 0c	 imul	 rcx, rcx, 12
  001ae	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 107  :     LogName[13] = (TimePointer->wSecond / 10)          + 48;

  001b2	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  001b7	0f b7 40 0c	 movzx	 eax, WORD PTR [rax+12]
  001bb	99		 cdq
  001bc	b9 0a 00 00 00	 mov	 ecx, 10
  001c1	f7 f9		 idiv	 ecx
  001c3	83 c0 30	 add	 eax, 48			; 00000030H
  001c6	b9 01 00 00 00	 mov	 ecx, 1
  001cb	48 6b c9 0d	 imul	 rcx, rcx, 13
  001cf	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 108  :     LogName[14] = (TimePointer->wSecond % 10)          + 48;

  001d3	48 8b 44 24 40	 mov	 rax, QWORD PTR TimePointer$[rsp]
  001d8	0f b7 40 0c	 movzx	 eax, WORD PTR [rax+12]
  001dc	99		 cdq
  001dd	b9 0a 00 00 00	 mov	 ecx, 10
  001e2	f7 f9		 idiv	 ecx
  001e4	8b c2		 mov	 eax, edx
  001e6	83 c0 30	 add	 eax, 48			; 00000030H
  001e9	b9 01 00 00 00	 mov	 ecx, 1
  001ee	48 6b c9 0e	 imul	 rcx, rcx, 14
  001f2	88 44 0c 58	 mov	 BYTE PTR LogName$[rsp+rcx], al

; 109  :     LogName[15] = '.';

  001f6	b8 01 00 00 00	 mov	 eax, 1
  001fb	48 6b c0 0f	 imul	 rax, rax, 15
  001ff	c6 44 04 58 2e	 mov	 BYTE PTR LogName$[rsp+rax], 46 ; 0000002eH

; 110  :     LogName[16] = 't';

  00204	b8 01 00 00 00	 mov	 eax, 1
  00209	48 6b c0 10	 imul	 rax, rax, 16
  0020d	c6 44 04 58 74	 mov	 BYTE PTR LogName$[rsp+rax], 116 ; 00000074H

; 111  :     LogName[17] = 'x';

  00212	b8 01 00 00 00	 mov	 eax, 1
  00217	48 6b c0 11	 imul	 rax, rax, 17
  0021b	c6 44 04 58 78	 mov	 BYTE PTR LogName$[rsp+rax], 120 ; 00000078H

; 112  :     LogName[18] = 't';

  00220	b8 01 00 00 00	 mov	 eax, 1
  00225	48 6b c0 12	 imul	 rax, rax, 18
  00229	c6 44 04 58 74	 mov	 BYTE PTR LogName$[rsp+rax], 116 ; 00000074H

; 113  :     LogName[19] =  0;

  0022e	b8 01 00 00 00	 mov	 eax, 1
  00233	48 6b c0 13	 imul	 rax, rax, 19
  00237	c6 44 04 58 00	 mov	 BYTE PTR LogName$[rsp+rax], 0

; 114  :     LogFileHandle = CreateFile(LogName,

  0023c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00245	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  0024d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00255	45 33 c9	 xor	 r9d, r9d
  00258	41 b8 03 00 00
	00		 mov	 r8d, 3
  0025e	ba 00 00 00 c0	 mov	 edx, -1073741824	; c0000000H
  00263	48 8d 4c 24 58	 lea	 rcx, QWORD PTR LogName$[rsp]
  00268	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  0026e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?LogFileHandle@@3PEAXEA, rax ; LogFileHandle

; 115  :                                GENERIC_READ | GENERIC_WRITE,
; 116  :                                FILE_SHARE_READ | FILE_SHARE_WRITE,
; 117  :                                NULL,
; 118  :                                CREATE_NEW,
; 119  :                                FILE_ATTRIBUTE_NORMAL,
; 120  :                                NULL);
; 121  :     if(LogFileHandle == INVALID_HANDLE_VALUE)

  00275	48 83 3d 00 00
	00 00 ff	 cmp	 QWORD PTR ?LogFileHandle@@3PEAXEA, -1 ; LogFileHandle
  0027d	75 06		 jne	 SHORT $LN2@CreateLogF

; 122  :     {
; 123  :         return false;

  0027f	32 c0		 xor	 al, al
  00281	eb 04		 jmp	 SHORT $LN1@CreateLogF

; 124  :     }
; 125  :     else

  00283	eb 02		 jmp	 SHORT $LN3@CreateLogF
$LN2@CreateLogF:

; 126  :     {
; 127  :         return true;

  00285	b0 01		 mov	 al, 1
$LN3@CreateLogF:
$LN1@CreateLogF:

; 128  :     }
; 129  : }

  00287	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0028b	5f		 pop	 rdi
  0028c	c3		 ret	 0
?CreateLogFile@@YA_NXZ ENDP				; CreateLogFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\nes emulator 2017 edition by carmine\src\main.cpp
_TEXT	SEGMENT
colon$ = 48
TimeNumberOfBytesWritten$ = 52
ColonNumberOfBytesWritten$ = 56
MessageNumberOfBytesWritten$ = 60
newLineNumberOfBytesWritten$ = 64
tv77 = 72
newLine$ = 80
Time$ = 88
Message$ = 128
?Log@@YA_NPEAD@Z PROC					; Log

; 40   : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 41   :     char Time[9];
; 42   :     TimeString(Time);

  00009	48 8d 4c 24 58	 lea	 rcx, QWORD PTR Time$[rsp]
  0000e	e8 00 00 00 00	 call	 ?TimeString@@YA_NPEAD@Z	; TimeString

; 43   :     DWORD TimeNumberOfBytesWritten = 0;

  00013	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR TimeNumberOfBytesWritten$[rsp], 0

; 44   :     WriteFile(LogFileHandle,

  0001b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00024	4c 8d 4c 24 34	 lea	 r9, QWORD PTR TimeNumberOfBytesWritten$[rsp]
  00029	41 b8 08 00 00
	00		 mov	 r8d, 8
  0002f	48 8d 54 24 58	 lea	 rdx, QWORD PTR Time$[rsp]
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?LogFileHandle@@3PEAXEA ; LogFileHandle
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile

; 45   :               Time,
; 46   :               8,
; 47   :               &TimeNumberOfBytesWritten,
; 48   :               NULL);
; 49   :     if(TimeNumberOfBytesWritten != 8)

  00041	83 7c 24 34 08	 cmp	 DWORD PTR TimeNumberOfBytesWritten$[rsp], 8
  00046	74 07		 je	 SHORT $LN2@Log

; 50   :     {
; 51   :         return false;

  00048	32 c0		 xor	 al, al
  0004a	e9 ec 00 00 00	 jmp	 $LN1@Log
$LN2@Log:

; 52   :     }
; 53   :     char colon [2] = {':', ' '};

  0004f	c6 44 24 30 3a	 mov	 BYTE PTR colon$[rsp], 58 ; 0000003aH
  00054	c6 44 24 31 20	 mov	 BYTE PTR colon$[rsp+1], 32 ; 00000020H

; 54   :     DWORD ColonNumberOfBytesWritten = 0;

  00059	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ColonNumberOfBytesWritten$[rsp], 0

; 55   :     WriteFile(LogFileHandle,

  00061	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0006a	4c 8d 4c 24 38	 lea	 r9, QWORD PTR ColonNumberOfBytesWritten$[rsp]
  0006f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00075	48 8d 54 24 30	 lea	 rdx, QWORD PTR colon$[rsp]
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?LogFileHandle@@3PEAXEA ; LogFileHandle
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile

; 56   :               &colon,
; 57   :               2,
; 58   :               &ColonNumberOfBytesWritten,
; 59   :               NULL);
; 60   :     if(ColonNumberOfBytesWritten != 2)

  00087	83 7c 24 38 02	 cmp	 DWORD PTR ColonNumberOfBytesWritten$[rsp], 2
  0008c	74 07		 je	 SHORT $LN3@Log

; 61   :     {
; 62   :         return false;

  0008e	32 c0		 xor	 al, al
  00090	e9 a6 00 00 00	 jmp	 $LN1@Log
$LN3@Log:

; 63   :     }
; 64   :     DWORD MessageNumberOfBytesWritten = 0;

  00095	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR MessageNumberOfBytesWritten$[rsp], 0

; 65   :     WriteFile(LogFileHandle,

  0009d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Message$[rsp]
  000a5	e8 00 00 00 00	 call	 strlen
  000aa	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b3	4c 8d 4c 24 3c	 lea	 r9, QWORD PTR MessageNumberOfBytesWritten$[rsp]
  000b8	44 8b c0	 mov	 r8d, eax
  000bb	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR Message$[rsp]
  000c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?LogFileHandle@@3PEAXEA ; LogFileHandle
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile

; 66   :               Message,
; 67   :               strlen(Message),
; 68   :               &MessageNumberOfBytesWritten,
; 69   :               NULL);
; 70   :     if(MessageNumberOfBytesWritten != strlen(Message))

  000d0	8b 44 24 3c	 mov	 eax, DWORD PTR MessageNumberOfBytesWritten$[rsp]
  000d4	48 89 44 24 48	 mov	 QWORD PTR tv77[rsp], rax
  000d9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Message$[rsp]
  000e1	e8 00 00 00 00	 call	 strlen
  000e6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv77[rsp]
  000eb	48 3b c8	 cmp	 rcx, rax
  000ee	74 04		 je	 SHORT $LN4@Log

; 71   :     {
; 72   :         return false;

  000f0	32 c0		 xor	 al, al
  000f2	eb 47		 jmp	 SHORT $LN1@Log
$LN4@Log:

; 73   :     }
; 74   :     char *newLine = "\r\n";

  000f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG85278
  000fb	48 89 44 24 50	 mov	 QWORD PTR newLine$[rsp], rax

; 75   :     DWORD newLineNumberOfBytesWritten = 0;

  00100	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR newLineNumberOfBytesWritten$[rsp], 0

; 76   :     WriteFile(LogFileHandle,

  00108	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00111	4c 8d 4c 24 40	 lea	 r9, QWORD PTR newLineNumberOfBytesWritten$[rsp]
  00116	41 b8 02 00 00
	00		 mov	 r8d, 2
  0011c	48 8b 54 24 50	 mov	 rdx, QWORD PTR newLine$[rsp]
  00121	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?LogFileHandle@@3PEAXEA ; LogFileHandle
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile

; 77   :               newLine,
; 78   :               2,
; 79   :               &newLineNumberOfBytesWritten,
; 80   :               NULL);
; 81   :     if(newLineNumberOfBytesWritten != 2)

  0012e	83 7c 24 40 02	 cmp	 DWORD PTR newLineNumberOfBytesWritten$[rsp], 2
  00133	74 04		 je	 SHORT $LN5@Log

; 82   :     {
; 83   :         return false;

  00135	32 c0		 xor	 al, al
  00137	eb 02		 jmp	 SHORT $LN1@Log
$LN5@Log:

; 84   :     }
; 85   :     return true;

  00139	b0 01		 mov	 al, 1
$LN1@Log:

; 86   : }

  0013b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0013f	c3		 ret	 0
?Log@@YA_NPEAD@Z ENDP					; Log
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\nes emulator 2017 edition by carmine\src\main.cpp
_TEXT	SEGMENT
TimePointer$ = 32
Time$ = 40
Out$ = 80
?TimeString@@YA_NPEAD@Z PROC				; TimeString

; 23   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 24   :     SYSTEMTIME Time;
; 25   :     LPSYSTEMTIME TimePointer = &Time;

  00009	48 8d 44 24 28	 lea	 rax, QWORD PTR Time$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR TimePointer$[rsp], rax

; 26   :     GetSystemTime(TimePointer);

  00013	48 8b 4c 24 20	 mov	 rcx, QWORD PTR TimePointer$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 27   :     Out[0] = (TimePointer->wHour   / 10) + 48;

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR TimePointer$[rsp]
  00023	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00027	99		 cdq
  00028	b9 0a 00 00 00	 mov	 ecx, 10
  0002d	f7 f9		 idiv	 ecx
  0002f	83 c0 30	 add	 eax, 48			; 00000030H
  00032	b9 01 00 00 00	 mov	 ecx, 1
  00037	48 6b c9 00	 imul	 rcx, rcx, 0
  0003b	48 8b 54 24 50	 mov	 rdx, QWORD PTR Out$[rsp]
  00040	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 28   :     Out[1] = (TimePointer->wHour   % 10) + 48;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR TimePointer$[rsp]
  00048	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  0004c	99		 cdq
  0004d	b9 0a 00 00 00	 mov	 ecx, 10
  00052	f7 f9		 idiv	 ecx
  00054	8b c2		 mov	 eax, edx
  00056	83 c0 30	 add	 eax, 48			; 00000030H
  00059	b9 01 00 00 00	 mov	 ecx, 1
  0005e	48 6b c9 01	 imul	 rcx, rcx, 1
  00062	48 8b 54 24 50	 mov	 rdx, QWORD PTR Out$[rsp]
  00067	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 29   :     Out[2] = ':';

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	48 6b c0 02	 imul	 rax, rax, 2
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Out$[rsp]
  00078	c6 04 01 3a	 mov	 BYTE PTR [rcx+rax], 58	; 0000003aH

; 30   :     Out[3] = (TimePointer->wMinute / 10) + 48;

  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR TimePointer$[rsp]
  00081	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00085	99		 cdq
  00086	b9 0a 00 00 00	 mov	 ecx, 10
  0008b	f7 f9		 idiv	 ecx
  0008d	83 c0 30	 add	 eax, 48			; 00000030H
  00090	b9 01 00 00 00	 mov	 ecx, 1
  00095	48 6b c9 03	 imul	 rcx, rcx, 3
  00099	48 8b 54 24 50	 mov	 rdx, QWORD PTR Out$[rsp]
  0009e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 31   :     Out[4] = (TimePointer->wMinute % 10) + 48;

  000a1	48 8b 44 24 20	 mov	 rax, QWORD PTR TimePointer$[rsp]
  000a6	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  000aa	99		 cdq
  000ab	b9 0a 00 00 00	 mov	 ecx, 10
  000b0	f7 f9		 idiv	 ecx
  000b2	8b c2		 mov	 eax, edx
  000b4	83 c0 30	 add	 eax, 48			; 00000030H
  000b7	b9 01 00 00 00	 mov	 ecx, 1
  000bc	48 6b c9 04	 imul	 rcx, rcx, 4
  000c0	48 8b 54 24 50	 mov	 rdx, QWORD PTR Out$[rsp]
  000c5	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 32   :     Out[5] = ':';

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	48 6b c0 05	 imul	 rax, rax, 5
  000d1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Out$[rsp]
  000d6	c6 04 01 3a	 mov	 BYTE PTR [rcx+rax], 58	; 0000003aH

; 33   :     Out[6] = (TimePointer->wSecond / 10) + 48;

  000da	48 8b 44 24 20	 mov	 rax, QWORD PTR TimePointer$[rsp]
  000df	0f b7 40 0c	 movzx	 eax, WORD PTR [rax+12]
  000e3	99		 cdq
  000e4	b9 0a 00 00 00	 mov	 ecx, 10
  000e9	f7 f9		 idiv	 ecx
  000eb	83 c0 30	 add	 eax, 48			; 00000030H
  000ee	b9 01 00 00 00	 mov	 ecx, 1
  000f3	48 6b c9 06	 imul	 rcx, rcx, 6
  000f7	48 8b 54 24 50	 mov	 rdx, QWORD PTR Out$[rsp]
  000fc	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 34   :     Out[7] = (TimePointer->wSecond % 10) + 48;

  000ff	48 8b 44 24 20	 mov	 rax, QWORD PTR TimePointer$[rsp]
  00104	0f b7 40 0c	 movzx	 eax, WORD PTR [rax+12]
  00108	99		 cdq
  00109	b9 0a 00 00 00	 mov	 ecx, 10
  0010e	f7 f9		 idiv	 ecx
  00110	8b c2		 mov	 eax, edx
  00112	83 c0 30	 add	 eax, 48			; 00000030H
  00115	b9 01 00 00 00	 mov	 ecx, 1
  0011a	48 6b c9 07	 imul	 rcx, rcx, 7
  0011e	48 8b 54 24 50	 mov	 rdx, QWORD PTR Out$[rsp]
  00123	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 35   :     Out[8] = 0;

  00126	b8 01 00 00 00	 mov	 eax, 1
  0012b	48 6b c0 08	 imul	 rax, rax, 8
  0012f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Out$[rsp]
  00134	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 36   :     return true;

  00138	b0 01		 mov	 al, 1

; 37   : }

  0013a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013e	c3		 ret	 0
?TimeString@@YA_NPEAD@Z ENDP				; TimeString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\nes emulator 2017 edition by carmine\src\main.cpp
_TEXT	SEGMENT
i$1 = 0
?TestRender@@YAXXZ PROC					; TestRender

; 12   : {

$LN6:
  00000	48 83 ec 18	 sub	 rsp, 24

; 13   :     for(int i = 0; i < 1366 * 768; i++)

  00004	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$1[rsp], 0
  0000b	eb 08		 jmp	 SHORT $LN4@TestRender
$LN2@TestRender:
  0000d	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00010	ff c0		 inc	 eax
  00012	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@TestRender:
  00015	81 3c 24 00 02
	10 00		 cmp	 DWORD PTR i$1[rsp], 1049088 ; 00100200H
  0001c	7d 14		 jge	 SHORT $LN3@TestRender

; 14   :     {
; 15   :         RenderBuffer[i] = 0x00FF0000;

  0001e	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?RenderBuffer@@3PEAIEA ; RenderBuffer
  00029	c7 04 81 00 00
	ff 00		 mov	 DWORD PTR [rcx+rax*4], 16711680 ; 00ff0000H

; 16   :     }

  00030	eb db		 jmp	 SHORT $LN2@TestRender
$LN3@TestRender:

; 17   : }

  00032	48 83 c4 18	 add	 rsp, 24
  00036	c3		 ret	 0
?TestRender@@YAXXZ ENDP					; TestRender
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\nes emulator 2017 edition by carmine\src\main.cpp
_TEXT	SEGMENT
Window$ = 112
ClientRect$1 = 120
DeviceContext$ = 136
WndClass$ = 144
Message$2 = 224
hInstance$ = 288
hPrevInstance$ = 296
lpCmdLine$ = 304
nCmdShow$ = 312
WinMain	PROC

; 181  : {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H

; 182  :     RenderBuffer =

  0001c	41 b9 04 00 00
	00		 mov	 r9d, 4
  00022	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  00028	ba 00 08 40 00	 mov	 edx, 4196352		; 00400800H
  0002d	33 c9		 xor	 ecx, ecx
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00035	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?RenderBuffer@@3PEAIEA, rax ; RenderBuffer

; 183  :         (unsigned *)(VirtualAlloc(0, 1366 * 768 * 4, MEM_COMMIT, PAGE_READWRITE));
; 184  :     BufferInfo.bmiHeader.biSize = sizeof(BufferInfo.bmiHeader.biSize);

  0003c	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?BufferInfo@@3UtagBITMAPINFO@@A, 4

; 185  :     BufferInfo.bmiHeader.biWidth = 1366;

  00046	c7 05 04 00 00
	00 56 05 00 00	 mov	 DWORD PTR ?BufferInfo@@3UtagBITMAPINFO@@A+4, 1366 ; 00000556H

; 186  :     BufferInfo.bmiHeader.biHeight = -768;

  00050	c7 05 08 00 00
	00 00 fd ff ff	 mov	 DWORD PTR ?BufferInfo@@3UtagBITMAPINFO@@A+8, -768 ; fffffffffffffd00H

; 187  :     BufferInfo.bmiHeader.biPlanes = 1;

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	66 89 05 0c 00
	00 00		 mov	 WORD PTR ?BufferInfo@@3UtagBITMAPINFO@@A+12, ax

; 188  :     BufferInfo.bmiHeader.biBitCount = 32;

  00066	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0006b	66 89 05 0e 00
	00 00		 mov	 WORD PTR ?BufferInfo@@3UtagBITMAPINFO@@A+14, ax

; 189  :     BufferInfo.bmiHeader.biCompression = BI_RGB;

  00072	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BufferInfo@@3UtagBITMAPINFO@@A+16, 0

; 190  :     
; 191  :     if(!CreateLogFile())

  0007c	e8 00 00 00 00	 call	 ?CreateLogFile@@YA_NXZ	; CreateLogFile
  00081	0f b6 c0	 movzx	 eax, al
  00084	85 c0		 test	 eax, eax
  00086	75 0a		 jne	 SHORT $LN6@WinMain

; 192  :     {
; 193  :         //Nothing to write the log to, so we just close
; 194  :         return 1;

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	e9 88 02 00 00	 jmp	 $LN1@WinMain
$LN6@WinMain:

; 195  :     }
; 196  :     
; 197  :     InternalMemory =

  00092	41 b9 04 00 00
	00		 mov	 r9d, 4
  00098	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  0009e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  000a3	33 c9		 xor	 ecx, ecx
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000ab	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?InternalMemory@@3PEAEEA, rax ; InternalMemory

; 198  :         (unsigned char *)(VirtualAlloc(0, 2048, MEM_COMMIT, PAGE_READWRITE));
; 199  :     if(InternalMemory == NULL)

  000b2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?InternalMemory@@3PEAEEA, 0 ; InternalMemory
  000ba	75 18		 jne	 SHORT $LN7@WinMain

; 200  :     {
; 201  :         Log("Aborting. Couldn't allocate space for internal memory.");

  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG85340
  000c3	e8 00 00 00 00	 call	 ?Log@@YA_NPEAD@Z	; Log

; 202  :         return 1;

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	e9 48 02 00 00	 jmp	 $LN1@WinMain

; 203  :     }
; 204  :     else

  000d2	eb 0c		 jmp	 SHORT $LN8@WinMain
$LN7@WinMain:

; 205  :     {
; 206  :         Log("Internal Memory allocated.");

  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG85341
  000db	e8 00 00 00 00	 call	 ?Log@@YA_NPEAD@Z	; Log
$LN8@WinMain:

; 207  :     }
; 208  : 
; 209  :     //Now let's create the window
; 210  :     WNDCLASS WndClass {};

  000e0	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR WndClass$[rsp]
  000e8	48 8b f8	 mov	 rdi, rax
  000eb	33 c0		 xor	 eax, eax
  000ed	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000f2	f3 aa		 rep stosb

; 211  :     WndClass.style = CS_HREDRAW|CS_VREDRAW|CS_OWNDC;

  000f4	c7 84 24 90 00
	00 00 23 00 00
	00		 mov	 DWORD PTR WndClass$[rsp], 35 ; 00000023H

; 212  :     WndClass.lpfnWndProc = WindowCallback;

  000ff	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?WindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; WindowCallback
  00106	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR WndClass$[rsp+8], rax

; 213  :     WndClass.hInstance = hInstance;

  0010e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  00116	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR WndClass$[rsp+24], rax

; 214  :     WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);

  0011e	ba 00 7f 00 00	 mov	 edx, 32512		; 00007f00H
  00123	33 c9		 xor	 ecx, ecx
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadCursorA
  0012b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR WndClass$[rsp+40], rax

; 215  :     WndClass.lpszClassName = "NESWindowClass";

  00133	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG85342
  0013a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR WndClass$[rsp+64], rax

; 216  :     if(!RegisterClass(&WndClass))

  00142	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR WndClass$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  00150	0f b7 c0	 movzx	 eax, ax
  00153	85 c0		 test	 eax, eax
  00155	75 16		 jne	 SHORT $LN9@WinMain

; 217  :     {
; 218  :         Log("Aborting. Couldn't register window class.");

  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG85344
  0015e	e8 00 00 00 00	 call	 ?Log@@YA_NPEAD@Z	; Log

; 219  :         return 1;

  00163	b8 01 00 00 00	 mov	 eax, 1
  00168	e9 ad 01 00 00	 jmp	 $LN1@WinMain
$LN9@WinMain:

; 220  :     }
; 221  :     Log("Registered window class.");

  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG85345
  00174	e8 00 00 00 00	 call	 ?Log@@YA_NPEAD@Z	; Log

; 222  :     HWND Window =
; 223  :         CreateWindowEx
; 224  :         (0,

  00179	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  00182	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  0018a	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0018f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  00198	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  001a1	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  001a9	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  001b1	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  001b9	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  001c1	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  001c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG85346
  001ce	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR WndClass$[rsp+64]
  001d6	33 c9		 xor	 ecx, ecx
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  001de	48 89 44 24 70	 mov	 QWORD PTR Window$[rsp], rax

; 225  :          WndClass.lpszClassName,
; 226  :          "NES17 by Carmine",
; 227  :          WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 228  :          CW_USEDEFAULT,
; 229  :          CW_USEDEFAULT,
; 230  :          CW_USEDEFAULT,
; 231  :          CW_USEDEFAULT,
; 232  :          0,
; 233  :          0,
; 234  :          hInstance,
; 235  :          0);
; 236  :     if(!Window)

  001e3	48 83 7c 24 70
	00		 cmp	 QWORD PTR Window$[rsp], 0
  001e9	75 16		 jne	 SHORT $LN10@WinMain

; 237  :     {
; 238  :         Log("Aborting. Couldn't create window.");

  001eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG85348
  001f2	e8 00 00 00 00	 call	 ?Log@@YA_NPEAD@Z	; Log

; 239  :         return 1;

  001f7	b8 01 00 00 00	 mov	 eax, 1
  001fc	e9 19 01 00 00	 jmp	 $LN1@WinMain
$LN10@WinMain:

; 240  :     }
; 241  :     Log("Created window.");

  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG85349
  00208	e8 00 00 00 00	 call	 ?Log@@YA_NPEAD@Z	; Log

; 242  :     HDC DeviceContext = GetDC(Window);

  0020d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$[rsp]
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00218	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR DeviceContext$[rsp], rax

; 243  :     Running = true;

  00220	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?Running@@3_NA, 1 ; Running
$LN2@WinMain:

; 244  :     while(Running)

  00227	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Running@@3_NA ; Running
  0022e	85 c0		 test	 eax, eax
  00230	0f 84 d5 00 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 245  :     {
; 246  :         MSG Message;
; 247  :         while(PeekMessage(&Message, 0, 0, 0, PM_REMOVE))

  00236	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0023e	45 33 c9	 xor	 r9d, r9d
  00241	45 33 c0	 xor	 r8d, r8d
  00244	33 d2		 xor	 edx, edx
  00246	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$2[rsp]
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00254	85 c0		 test	 eax, eax
  00256	74 1e		 je	 SHORT $LN5@WinMain

; 248  :         {
; 249  :             TranslateMessage(&Message);

  00258	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$2[rsp]
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 250  :             DispatchMessage(&Message);

  00266	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$2[rsp]
  0026e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 251  :         }

  00274	eb c0		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 252  :         RECT ClientRect;
; 253  :         GetClientRect(Window, &ClientRect);

  00276	48 8d 54 24 78	 lea	 rdx, QWORD PTR ClientRect$1[rsp]
  0027b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$[rsp]
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 254  :         StretchDIBits(DeviceContext,

  00286	8b 44 24 7c	 mov	 eax, DWORD PTR ClientRect$1[rsp+4]
  0028a	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR ClientRect$1[rsp+12]
  00291	2b c8		 sub	 ecx, eax
  00293	8b c1		 mov	 eax, ecx
  00295	8b 4c 24 78	 mov	 ecx, DWORD PTR ClientRect$1[rsp]
  00299	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR ClientRect$1[rsp+8]
  002a0	2b d1		 sub	 edx, ecx
  002a2	8b ca		 mov	 ecx, edx
  002a4	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  002ac	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  002b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?BufferInfo@@3UtagBITMAPINFO@@A ; BufferInfo
  002bb	48 89 54 24 50	 mov	 QWORD PTR [rsp+80], rdx
  002c0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?RenderBuffer@@3PEAIEA ; RenderBuffer
  002c7	48 89 54 24 48	 mov	 QWORD PTR [rsp+72], rdx
  002cc	c7 44 24 40 00
	03 00 00	 mov	 DWORD PTR [rsp+64], 768	; 00000300H
  002d4	c7 44 24 38 56
	05 00 00	 mov	 DWORD PTR [rsp+56], 1366 ; 00000556H
  002dc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  002e4	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  002ec	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002f0	44 8b c9	 mov	 r9d, ecx
  002f3	45 33 c0	 xor	 r8d, r8d
  002f6	33 d2		 xor	 edx, edx
  002f8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00300	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 255  :                       0, 0,
; 256  :                       ClientRect.right - ClientRect.left,
; 257  :                       ClientRect.bottom - ClientRect.top,
; 258  :                       0, 0,
; 259  :                       1366, 768,
; 260  :                       RenderBuffer, &BufferInfo,
; 261  :                       DIB_RGB_COLORS, SRCCOPY);
; 262  :     }

  00306	e9 1c ff ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:

; 263  :     CloseHandle(LogFileHandle);

  0030b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?LogFileHandle@@3PEAXEA ; LogFileHandle
  00312	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 264  :     return 0;

  00318	33 c0		 xor	 eax, eax
$LN1@WinMain:

; 265  : }

  0031a	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  00321	5f		 pop	 rdi
  00322	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
